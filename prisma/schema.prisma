// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AssetOperationEvent {
  id              Int       @id @default(autoincrement())
  
  // Dados do evento blockchain
  channelName     String    @map("channel_name")
  assetId         String    @map("asset_id")
  operation       Int       // 0=CREATE, 1=UPDATE, etc.
  status          Int       // 0=ACTIVE, 1=INACTIVE
  blockTimestamp  BigInt    @map("block_timestamp")
  relatedAssetIds String[]  @map("related_asset_ids")
  relatedAmounts  String[]  @map("related_amounts") // String porque Decimal[] não existe
  ownerAddress    String    @map("owner_address")
  idLocal         String?   @map("id_local")
  amount          String    // String para guardar BigInt sem perda
  dataHash        String?   @map("data_hash")
  
  // Metadados transação
  transactionHash String    @map("transaction_hash")
  blockNumber     BigInt    @map("block_number")
  logIndex        Int       @map("log_index")
  
  // Controle
  processed       Boolean   @default(false)
  createdAt       DateTime  @default(now()) @map("created_at")
  
  // Relações
  parentRelations AssetParentRelation[]
  
  @@unique([transactionHash, logIndex], map: "unique_tx_log")
  @@index([assetId])
  @@index([channelName])
  @@index([blockNumber])
  @@index([processed])
  @@map("asset_operation_event")
}

model Asset {
  assetId         String   @id @map("asset_id")
  channelName     String   @map("channel_name")
  
  // Estado atual
  ownerAddress    String   @map("owner_address")
  amount          String   // String para BigInt
  idLocal         String?  @map("id_local")
  dataHash        String?  @map("data_hash")
  status          Int      // 0=ACTIVE, 1=INACTIVE
  
  // Metadados
  originOwner     String?  @map("origin_owner")
  createdAt       DateTime @map("created_at")
  lastUpdated     DateTime @map("last_updated")
  
  // Hierarquia (pai único)
  parentAssetId   String?  @map("parent_asset_id")
  parent          Asset?   @relation("AssetHierarchy", fields: [parentAssetId], references: [assetId], onDelete: NoAction, onUpdate: NoAction)
  children        Asset[]  @relation("AssetHierarchy")
  
  // Relacionamentos múltiplos pais
  asParent        AssetParentRelation[] @relation("ParentAsset")
  asChild         AssetParentRelation[] @relation("ChildAsset")
  
  // Paths hierárquicos
  asAncestor      AssetHierarchyPath[]  @relation("Ancestor")
  asDescendant    AssetHierarchyPath[]  @relation("Descendant")
  
  @@index([channelName])
  @@index([ownerAddress])
  @@index([status])
  @@index([parentAssetId])
  @@map("asset")
}

model AssetParentRelation {
  id                 Int      @id @default(autoincrement())
  parentAssetId      String   @map("parent_asset_id")
  childAssetId       String   @map("child_asset_id")
  operationEventId   Int      @map("operation_event_id")
  contributedAmount  String?  @map("contributed_amount")
  createdAt          DateTime @default(now()) @map("created_at")
  
  parent             Asset              @relation("ParentAsset", fields: [parentAssetId], references: [assetId])
  child              Asset              @relation("ChildAsset", fields: [childAssetId], references: [assetId])
  operationEvent     AssetOperationEvent @relation(fields: [operationEventId], references: [id])
  
  @@unique([parentAssetId, childAssetId, operationEventId])
  @@index([parentAssetId])
  @@index([childAssetId])
  @@map("asset_parent_relation")
}

model AssetHierarchyPath {
  id           Int      @id @default(autoincrement())
  ancestorId   String   @map("ancestor_id")
  descendantId String   @map("descendant_id")
  depth        Int
  path         String
  createdAt    DateTime @default(now()) @map("created_at")
  
  ancestor     Asset    @relation("Ancestor", fields: [ancestorId], references: [assetId])
  descendant   Asset    @relation("Descendant", fields: [descendantId], references: [assetId])
  
  @@unique([ancestorId, descendantId, path])
  @@index([descendantId, depth])
  @@index([ancestorId])
  @@map("asset_hierarchy_path")
}

model BlockTracker {
  id         String   @id
  lastBlock  BigInt   @map("last_block")
  updatedAt  DateTime @default(now()) @map("updated_at")
  
  @@map("block_tracker")
}

// Schemas
model SchemaData {
  id              Int       @id @default(autoincrement())
  
  // ========== IDENTIFICAÇÃO (String original + Hash) ==========
  schemaId        String    @map("schema_id")           
  schemaIdHash    String    @map("schema_id_hash")      // bytes32
  channelName     String    @map("channel_name")        
  channelNameHash String    @map("channel_name_hash")   // bytes32
  version         Int                                   
  name            String                                

  // ========== DADOS DO SCHEMA ==========
  dataHash        String    @map("data_hash")           // Hash do schema (0x...)
  fullSchema      Json      @map("full_schema")         // { properties, required }
  description     String?                               // Descrição (opcional)
  
  // ========== BLOCKCHAIN METADATA (do evento) ==========
  owner           String                                
  blockTimestamp  BigInt    @map("block_timestamp")     // Timestamp blockchain
  
  // ========== TRANSAÇÃO ==========
  transactionHash String    @map("transaction_hash")    
  blockNumber     BigInt    @map("block_number")        
  logIndex        Int       @map("log_index")           
  
  // ========== STATUS & CONTROLE ==========
  status          String    @default("ACTIVE")          // ACTIVE, DEPRECATED, INACTIVE
  
  // ========== TIMESTAMPS BACKEND ==========
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // ========== ÍNDICES & CONSTRAINTS ==========
  @@unique([schemaId, channelName, version], map: "unique_schema_version")
  @@unique([transactionHash, logIndex], map: "unique_schema_tx_log")
  @@index([schemaId, channelName])
  @@index([channelName])
  @@index([status])
  @@map("schema_data")
}